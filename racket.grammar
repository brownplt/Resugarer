core

  values
    Value : String -> Expr;
    True : Expr;
    False : Expr;
    Num : String -> Expr;
    Str : String -> Expr;
    Id : String -> Expr;

  constructors
    Lambda : [String] * Expr -> Expr;
    Begin : [Expr] -> Expr;
    Set : String * Expr -> Expr;
    If : Expr * Expr * Expr -> Expr;
    Apply : Expr * [Expr] -> Expr;


surface

  values
    Value : String -> Expr;
    True : Expr;
    False : Expr;
    Num : String -> Expr;
    Str : String -> Expr;
    Id : String -> Expr;

    Bind : String * Expr -> Bind;    
    CondCase : Expr * Expr -> CondCase;
    Accept : AutomatonTransition;
    ATransition : Expr * Expr -> AutomatonTransition;
    ACondition : String * [AutomatonTransition] -> AutomatonCondition;

    Delay : Expr -> Expr;

  constructors
    Lambda : [String] * Expr -> Expr;
    Begin : [Expr] -> Expr;
    Set : String * Expr -> Expr;
    If : Expr * Expr * Expr -> Expr;
    Apply : Expr * [Expr] -> Expr;
    
    Inc : Expr -> Expr;
    Let : [Bind] * [Expr] -> Expr;
    Letrec : [Bind] * [Expr] -> Expr;
    Cond : [CondCase] * Expr -> Expr;
    Or : [Expr] -> Expr;
    And : [Expr] -> Expr;
    ProcessState : [AutomatonTransition] -> Expr;
    Automaton : String * [AutomatonCondition] -> Expr;
    Function : [String] * Expr -> Expr;
    Return : Expr -> Expr;


rules
  Delay(x) -> Apply(Lambda([], x), []);

  Inc(x) -> Apply(Id("+"), [x, Num("1")]);
  Let([Bind(v, b)], [x ...]) ->
    Apply(Lambda([v], Begin([x ...])), [b]);
  Let([Bind(v, b), Bind(v2, b2), bs ...], x) ->
    Apply(Lambda([v], !Let([Bind(v2, b2), bs ...], x)), [b]);
  Letrec([Bind(v, b) ...], [x ...]) ->
    Let([Bind(v, Apply(Id("void"), [])) ...],
      [Begin([Set(v, b) ...]), x ...]);
  Cond([], e) -> e;
  Cond([CondCase(x, y), cs ...], e) ->
    If(x, y, !Cond([cs ...], e));
  Or([x]) -> Delay(x);
  Or([x, y, ys ...]) ->
    Let([Bind("t", x)], [If(Id("t"), Id("t"), !Or([y, ys ...]))]);
  And([x]) -> Delay(x);
  And([x, y, ys ...]) ->
    If(x, And([y, ys ...]), False);

  ProcessState([Accept]) ->
    Lambda(["stream"],
      Cond([CondCase(Apply(Id("equal?"), [Str(""), Id("stream")]), True)],
            False));
  ProcessState([ATransition(label, target) ...]) ->
    Lambda(["stream"],
      If(Apply(Id("equal?"), [Str(""), Id("stream")]),
         False,
         Let([Bind("head", Apply(Id("string-first"), [Id("stream")])),
              Bind("tail", Apply(Id("string-rest"), [Id("stream")]))],
             [Cond([CondCase(Apply(Id("equal?"), [label, Id("head")]),
                            !Apply(target, [Id("tail")]))
                    ...],
                   False)])));
  Automaton(init_state, [ACondition(state, [response ...]) ...]) ->
    Letrec([Bind(state, ProcessState([response ...])) ...],
           [Lambda(["x"], !Apply(Id(init_state), [Id("x")]))]);

  Function(args, body) ->
    Lambda(args, Apply(Id("call/cc"), [Lambda(["%RETURN"], body)]));
  Return(x) ->
    Let([Bind(res, x)],
        [Apply(Id("%RETURN"), [Id(res)])])
    fresh res;
