core
  start Expr
  constructors
    Value : String -> Expr;
    True : Expr;
    False : Expr;
    Num : String -> Expr;
    Str : String -> Expr;
    Id : String -> Expr;
    Lambda : [String] * [Expr] -> Expr;
    Begin : [Expr] -> Expr;
    Set : String * Expr -> Expr;
    If : Expr * Expr * Expr -> Expr;
    Apply : Expr * [Expr] -> Expr;
surface
  start Expr
  constructors
    Value : String -> Expr;
    True : Expr;
    False : Expr;
    Num : String -> Expr;
    Str : String -> Expr;
    Id : String -> Expr;
    Lambda : [String] * [Expr] -> Expr;
    Begin : [Expr] -> Expr;
    Set : String * Expr -> Expr;
    If : Expr * Expr * Expr -> Expr;
    Apply : Expr * [Expr] -> Expr;

 	Inc : Expr -> Expr;
    IncInc : Expr -> Expr;
    Binding : String * Expr -> Binding;
    Let : [Binding] * [Expr] -> Expr;
rules
  Inc(x) -> Apply(Id("+"), [x, Apply(Id("+"), [Num("0"), Num("1")])]);
  IncInc(x) -> Inc(x);
  Let([Binding(v, b)], [x ...]) ->
    Apply(Lambda([v], [x ...]), [b]);
  Let([Binding(v, b), bs ...], x) ->
    Apply(Lambda([v], Let([bs ...], x)), [b]);
